!--------------------------------------------------------------------------
! This is free software, you can use/redistribute/modify it under the terms of
! the EC-RPN License v2 or any later version found (if not provided) at:
! - http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
! - EC-RPN License, 2121 TransCanada, suite 500, Dorval (Qc), CANADA, H9P 1J3
! - service.rpn@ec.gc.ca
! It is distributed WITHOUT ANY WARRANTY of FITNESS FOR ANY PARTICULAR PURPOSE.
!-------------------------------------------------------------------------- 

!/**
module phys_prestep_mod
   implicit none
   private
   !@objective 
   !@author Stephane Chamberland, April 2012
   !@revisions
   ! 001    M. Abrahamowicz    May 2014
   !        Abort if PR0 (1hr precip. accumulation) has negative value
   !@public_functions
   public :: phys_prestep
   !@public_params
   !@public_vars
!**/
#include <arch_specific.hf>
#include <rmnlib_basics.hf>
#include <gmm.hf>
#include <msg.h>

contains

   !/**
   function phys_prestep(F_step) result(F_istat)
      implicit none
      !@objective
      !@arguments
      integer,intent(in) :: F_step
      !@return
      integer :: F_istat
   !**/
      integer,external :: phy_getindx3
      integer,parameter :: MAX_PARAMS = 8
      logical,save :: is_init_L = .false.
      integer,save :: p_ni=-1, p_nj=-1, p_nk=-1
      integer,save :: busidx_pren=-1, busidx_tss=-1
      real,pointer,save,dimension(:,:) :: BUSENT3d,BUSPER3d,BUSDYN3d,BUSVOL3d
      integer :: istat,busidx1,busidx2,params(MAX_PARAMS)
      character(len=32)  :: varname_S,outname_S,inname_S,bus_S
      !---------------------------------------------------------------------
      F_istat = RMN_OK

      if (.not.is_init_L) then
         call msg(MSG_INFO,'(Phys) Pre-Step Init [Begin]')
         F_istat = min(gmm_get('BUSENT_3d',BUSENT3d),F_istat)
         F_istat = min(gmm_get('BUSPER_3d',BUSPER3d),F_istat)
         F_istat = min(gmm_get('BUSDYN_3d',BUSDYN3d),F_istat)
         F_istat = min(gmm_get('BUSVOL_3d',BUSVOL3d),F_istat)
         call phy_opti('NI',p_ni,1,'GET',.false.,istat)
         call phy_opti('NJ',p_nj,1,'GET',.false.,istat)
         call phy_opti('NK',p_nk,1,'GET',.false.,istat)
         if (minval((/p_ni,p_nj,p_nk/)) <= 0) F_istat = RMN_ERR
         varname_S = 'pren' ; outname_S = ' ' ; inname_S = '  ' ; bus_S = 'e'
         F_istat = min(phy_getindx3(varname_S,outname_S,inname_S,bus_S,busidx_pren,params,MAX_PARAMS),F_istat)
         varname_S = 'tss' ; outname_S = ' ' ; inname_S = '  ' ; bus_S = 'p'
         F_istat = min(phy_getindx3(varname_S,outname_S,inname_S,bus_S,busidx_tss,params,MAX_PARAMS),F_istat)
         call collect_error(F_istat)
         if (.not.RMN_IS_OK(F_istat)) then
            call msg(MSG_ERROR,'(Phys) Pre-Step Problem in Init')
            return
         else
            call msg(MSG_INFO,'(Phys) Pre-Step Init End')
         endif
         is_init_L = .true.
      endif

      BUSVOL3d = 0.
 

      !# Abort if 1hr precipitation accumulation is negative
      if ( minval( BUSENT3d(busidx_pren:busidx_pren+p_ni-1,:) ) < 0.0 ) then
         F_istat = RMN_ERR
         call msg(MSG_ERROR,'(Phys) Pre-Step ABORT: 1hr precip accum. PR0 is NEGATIVE. ')
         return
      endif

      !# Note: 1h PR accumulation PR0 is read into PREN then copied to TSS
      BUSPER3d(busidx_tss:busidx_tss+p_ni-1,:) = BUSENT3d(busidx_pren:busidx_pren+p_ni-1,:)/3600.
      !---------------------------------------------------------------------
      return
   end function phys_prestep


end module phys_prestep_mod
